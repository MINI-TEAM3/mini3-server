name: drcal-cicd

on:
  push:
    branches:
      - refactor #적용할 브랜치

env:
  S3_BUCKET_NAME: drcal-bucket
  RESOURCE_PATH: ./src/main/resources/application-prod.yml
  CODE_DEPLOY_APPLICATION_NAME: drcal-code-deploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: drcal-group

jobs:
  build:
    runs-on: ubuntu-latest
    #우분투에서 실행


    steps:
      - name: Checkout
        uses: actions/checkout@v2
        #레파지토리의 프로젝트 코드를 CI에 다운로드

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          distribution: 'corretto'
          java-version: 11
        #JDK 11 다운

      - name: Set api server yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}
        env:
          spring.datasource.url: ${{ secrets.RDS_HOSTNAME }}
          spring.datasource.username: ${{ secrets.RDS_USERNAME }}
          spring.datasource.password: ${{ secrets.RDS_PASSWORD }}
          cloud.aws.s3.bucket: drcal-bucket
          cloud.aws.credentials.access-key: ${{ secrets.AWS_ACCESS_KEY }}
          cloud.aws.credentials.secret-key: ${{ secrets.AWS_SECRET_KEY }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash
        #gradlew에 실행권한 부여

      - name: Build with Gradle
        run: ./gradlew clean build -x test
        shell: bash
        #만들어진 jar파일의 폴더를 날리고 새로 만드는 명령어로 충돌이 방지됨
        #-x text: 테스트 진행 안함

      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"
        #timezone 설정: UTC 기준 +9시간 -> KST

      - name: Show Current Time
        run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}"
        shell: bash
        #step에 있는 id를 출력

      - name: Make zip file
        run: zip -r $GITHUB_SHA.zip .
        shell: bash
        #커밋해시.zip을 생성

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2
        #aws접근을 위한 과정

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip
        #S3에 업로드

      - name: Code Deploy
        run: |
          aws deploy create-deployment \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip
        #codedeploy 통해서 배포